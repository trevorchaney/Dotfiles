; Trevor's Git Configuration File

[user]
    name = Trevor Chaney
    email = trevorchaney@gmail.com
[core]
    editor = nvim
    ; exlcudesFile = ~/.gitignore_global
    exlcudesFile = ~/.config/git/.gitignore_global
    fileMode = false
    ignoreCase = true
    logAllRefUpdates = true
[credential "https://github.com"]
    helper = !gh auth git-credential
[credential "helperselector"]
    selected = <no helper>
[credential]
    helper = store
[color]
    ui = true
[init]
    defaultBranch = master
[branch "master"]
    mergeoptions = --no-ff ; This is set this way for work. Forces merge commit.
    ; mergeoptions = --ff-only ; This should be preferred
[format]
    pretty = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(16,trunc)%ad %C(auto,green)%<(14,trunc)%aN %C(auto,reset)%s%C(auto,red)% gD% D
[log]
    date = human
[pull]
    ; rebase = false
    rebase = true ; This should be preferred
[push]
    default = current
[fetch]
    prune = true
[rebase]
    autoStash = true
    autoSquash = true
[merge]
    tool = vscode
    ; tool = vimdiff
    ; conflictStyle = diff3
    ; prompt = false
[mergetool "vscode"]
    cmd = "code -n -w $MERGED"
[diff]
    tool = vscode
    colorMoved = zebra
[difftool "vscode"]
    cmd = "code -n -w -d $LOCAL $REMOTE"
[difftool "sourcetree"]
    cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
    cmd = "'' "
    trustExitCode = true
[alias]
    ; General
    alias = config --get-regexp alias
    ap = add --patch
    co = checkout
    cp = cherry-pick
    gr = grep -WIi
    refs = reflog show --all
    r = reset
    rns = "!_() { rev=$(git rev-parse "$1") && git stash drop $1 || exit 1 ; git stash store -m \"$2\" \"$rev\"; }; _"
    s = status -s
    st = status
    unstage = reset HEAD --

    ; Log
    last = log -1 HEAD
    lg = log --decorate --graph
    lo = log --all --decorate --graph
    full = log --format=full
    fuller = log --format=fuller
    sl = shortlog
    slog = log --stat
    plog = log -p
    lgrep = log --grep=

    ; Branches
    br = branch
    bra = branch -a
    brr = branch -r
    brd = git symbolic-ref --short HEAD
    bred = branch --edit-description
    brshow = config --get-regexp 'branch.*.description'
    brshow1 = !git config --get "branch.$(git rev-parse --abbrev-ref HEAD).description"

    ; Commits
    ci = commit
    ca = commit -a
    camend = commit -a --amend -C HEAD
    cm = commit -m
    cam = commit -a -m
    amend = commit --amend

    ; Diffs
    ds = diff --staged
    dead = diff HEAD
    dstat = diff --stat
    check = diff --check

    ; Remotes
    rso = remote show origin

    ; Git-flow
    ff = flow feature
    fr = flow release
    fh = flow hotfix