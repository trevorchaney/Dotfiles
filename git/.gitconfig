; Trevor's Git Configuration File

[user]
    name = Trevor Chaney
    email = trevorchaney@gmail.com
[commit]
    gpgsign = true
[core]
    autocrlf = true
    editor = nvim
    ; exlcudesFile = ~/.gitignore_global
    excludesFile = ~/.config/git/.gitignore_global
    fileMode = false
    ignoreCase = true
    logAllRefUpdates = true
    autocrlf = true
[credential]
    helper = manager-core
[credential "https://github.com"]
    helper = !gh auth git-credential
[credential "helperselector"]
    selected = <no helper>
[credential "http://3.101.19.21"]
    provider = generic
[credential "http://3.95.241.3"]
    provider = generic
[safe]
    directory = C:/Users/tlc/scoop/apps/scoop/current
[color]
    ui = true
[init]
    defaultBranch = master
[branch "master"]
    mergeoptions = --no-ff            ; This is set this way for work. Forces merge commit.
    ; mergeoptions = --ff-only        ; This should be preferred
[format]
    pretty = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(16,trunc)%ad %C(auto,green)%<(14,trunc)%aN %C(auto,reset)%s%C(auto,red)% gD% D
[log]
    date = human
[pull]
    ; rebase = false
    rebase = true ; This should be preferred
[push]
    default = current
[fetch]
    prune = true
[rebase]
    autoStash = true
    autoSquash = true
[merge]
    tool = vscode
    ; tool = vimdiff
    ; conflictStyle = diff3
    ; prompt = false
[mergetool "vscode"]
    cmd = "code -n -w $MERGED"
[diff]
    tool = vscode
    colorMoved = zebra
[difftool "vscode"]
    cmd = "code -n -w -d $LOCAL $REMOTE"
[difftool "sourcetree"]
    cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
    cmd = "'' "
    trustExitCode = true
[alias]
    ; General
    alias = config --get-regexp alias                          ; List all defined Git aliases
    ap = add --patch                                           ; Interactively stage changes
    co = checkout                                              ; Checkout a branch or revision
    cob = checkout -b                                          ; Create and checkout a new branch
    cp = cherry-pick                                           ; Cherry-pick commits
    gg = grep -E --line-number                                 ; Run grep with extended regex and line numbers
    gr = grep -WIi                                             ; Case-insensitive grep with match word boundaries
    r = reset                                                  ; Reset current HEAD
    rns = "!_() { rev=$(git rev-parse \"$1\") && git stash drop $1 || exit 1 ; git stash store -m \"$2\" \"$rev\"; }; _" ; Rename a stash entry with a new message
    s = status -s                                              ; Short git status
    sadd = add --intent-to-add                                 ; Stage untracked files for future changes
    st = status                                                ; Git status
    sw = switch                                                ; Switch branches
    unadd = restore --staged                                   ; Unstage changes (like unadd from index)
    unstage = reset HEAD --                                    ; Unstage files manually
    untrack = rm --cached                                      ; Stop tracking a file but keep it in the working directory

    ; References
    recent = for-each-ref --sort=committerdate --format='%(HEAD) %(color:magenta)%(refname:short) %(color:yellow)%(objectname:short) %(color:blue)(%(committerdate:relative)) %(color:green)%(authorname) %(color:reset)%(contents:subject)' ; List all refs sorted by commit date
    refbr = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:magenta)%(refname:short) %(color:yellow)%(objectname:short) %(color:blue)(%(committerdate:relative)) %(color:green)%(authorname) %(color:reset)%(contents:subject)' ; List local branches sorted by commit date
    refr = for-each-ref --sort=committerdate refs/remotes      ; List remote branches sorted by commit date
    reflogs = reflog show --all                                ; Show reflog entries for all refs

    ; Logs
    full = log --format=full                                   ; Show full commit information
    fuller = log --format=fuller                               ; Show extended commit info with dates
    last = log -1 HEAD                                         ; Show the last commit
    leg = log -E --grep                                        ; Search commits by regex
    lfh = log --full-history --                                ; Show full history of a path
    lg = log --decorate --graph                                ; Graph log with refs
    lgr = log --format=fuller -i --grep                        ; Case-insensitive grep with fuller format
    lgrep = log --grep=                                        ; Quick log search alias
    lig = log -i --grep                                        ; Case-insensitive commit search
    lo = log --all --decorate --graph                          ; Full log graph with all refs
    lop = log -p                                               ; Show log with patches
    sl = shortlog                                              ; Summary log grouped by author
    slog = log --stat                                          ; Log with file change stats
    struct = log --oneliner --simplified-by-decoration --graph --all ; Graph log with simplified structure

    ; Branches
    br = branch                                                ; List branches
    bra = branch -a                                            ; List all branches (local + remote)
    brd = symbolic-ref --short HEAD                            ; Show current branch
    bred = branch --edit-description                           ; Edit branch description
    brn = branch -m                                            ; Rename current branch
    brr = branch -r                                            ; List remote branches
    brshow = config --get-regexp 'branch.*.description'        ; Show all branch descriptions
    brshow1 = !git config --get "branch.$(git rev-parse --abbrev-ref HEAD).description" ; Show description for current branch

    ; Commits
    ci = commit                                                ; Commit staged changes
    ca = commit -a                                             ; Commit all tracked changes
    cm = commit -m                                             ; Commit with message
    cam = commit -a -m                                         ; Commit all tracked changes with message
    camp = "!_() { git commit -a -m \"$1\" && git push; }; _"  ; Commit all and push in one command
    camend = commit -a --amend -C HEAD                         ; Amend last commit with all tracked changes
    amend = commit --amend                                     ; Amend last commit

    ; Blames
    wtf = blame -wCM                                           ; Show blame ignoring whitespace and across copies/moves

    ; Pushes
    fpush = push --force-with-lease                            ; Force push safely with lease check
    pushu = push -u origin HEAD                                ; Push and set upstream for current branch

    ; Fetches
    f = fetch                                                  ; Shorthand for basic fetch
    fo = fetch origin                                          ; Fetch only from origin
    fu = fetch --all                                           ; Fetch from all remotes
    fprune = fetch --prune                                     ; Fetch and remove any deleted remote branches
    fpo = fetch --prune origin                                 ; Fetch + prune from origin only
    ftags = fetch --tags                                       ; Fetch remote tags
    fclean = fetch --prune --tags                              ; Fetch + clean stale branches and update tags
    fup = fetch upstream                                       ; Fetch from upstream remote (useful in forked repos)
    fupstat = "!git fetch upstream && git status"              ; Fetch from upstream and check local status
    prmerge = "!_() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; }; _" ; Fetch and checkout GitHub PR by number
    sync = "!git fetch origin && git rebase origin/$(git rev-parse --abbrev-ref HEAD)" ; Pull with rebase from origin

    ; Fetch + Info
    fcheck = "!git fetch --dry-run && git status"              ; Simulate fetch to check if there are remote changes
    fstat = "!git fetch && git status"                         ; Fetch and show whether you're behind or ahead
    fdelta = "!git fetch && git rev-list --left-right --count HEAD...@{u}" ; Show commit delta between local and upstream

    ; Merging
    m = merge                                                  ; Merge the given branch into the current one
    ma = merge --abort                                         ; Abort a merge in progress (use if conflicts get out of hand)
    mc = merge --continue                                      ; Continue a merge after resolving conflicts
    ms = merge --squash                                        ; Squash merge (combine changes without a merge commit)
    mnff = merge --no-ff                                       ; Force a merge commit even if fast-forward is possible
    mff = merge --ff-only                                      ; Only allow fast-forward merges (fail otherwise)
    mt = mergetool                                             ; Open your configured merge tool to resolve conflicts
    mtc = mergetool --tool=code                                ; Use VS Code as the merge tool (customizable)
    ml = log --merges                                          ; Show only merge commits in the log
    mlb = log --merges --oneline --graph                       ; Graph view of merge history

    ; Diffs
    ds = diff --staged                                         ; Show staged diffs
    dlc = diff --cached HEAD^                                  ; Show staged diffs vs previous commit
    dead = diff HEAD                                           ; Show diffs against HEAD
    dstat = diff --stat                                        ; Show summary of diffs per file
    check = diff --check                                       ; Show whitespace errors
    dc = diff -w --word-diff=color --ignore-space-at-eol       ; Word diff ignoring whitespace

    ; Remotes
    rs = remote show                                           ; Show all remotes
    rso = remote show origin                                   ; Show detailed info about origin

    ; Stashes
    lst = stash list                                           ; List stashes
    spatch = "!_() { git stash show -p | git apply -R && git stash drop;  }; _" ; Apply and drop stash with patch (note: `get` likely a typo)
    spop = stash pop                                           ; Pop last stash

    ; Worktrees
    wt = worktree                                              ; Shortcut for worktree commands

    ; Git-flow
    ff = flow feature                                          ; Git-flow: feature
    fr = flow release                                          ; Git-flow: release
    fh = flow hotfix                                           ; Git-flow: hotfix

